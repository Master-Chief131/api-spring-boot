package com.example.demo.service;

import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.stereotype.Service;

import java.util.Properties;

@Service
public class EmailService {
    
    /**
     * Env√≠a credenciales por correo usando configuraci√≥n del ERP original
     * Replicando exactamente el comportamiento de EnvioClave.java
     */
    public void enviarCredenciales(String usuario, String claveGenerada, 
                                 String nombreCompleto, String emailDestino) {
        enviarCredenciales(usuario, claveGenerada, nombreCompleto, emailDestino, 1);
    }
      /**
     * Env√≠a credenciales por correo usando configuraci√≥n espec√≠fica de compa√±√≠a
     */    public void enviarCredenciales(String usuario, String claveGenerada, 
                                 String nombreCompleto, String emailDestino, Integer noCia) {
        System.out.println("=== ENVIANDO CORREO VIA GMAIL ===");
        System.out.println("Destinatario: " + emailDestino);
        System.out.println("Usuario: " + usuario);
        System.out.println("Nombre completo: " + nombreCompleto);
        System.out.println("Compa√±√≠a: " + noCia);
        System.out.println("Nueva cuenta Gmail: opinto@cpt-soft.com");
        
        // Crear mensaje
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom("opinto@cpt-soft.com");
        message.setTo(emailDestino);
        message.setSubject("Credenciales de Acceso - CPT-SOFT ERP");
        
        // Mensaje id√©ntico al ERP original
        String cuerpoMensaje = String.format(
            "Bienvenido al sistema de Planificaci√≥n de Recursos Empresariales (CPT-SOFT ERP), " +
            "nos complace serle √∫til en sus labores diarias.\n\n" +
            "Su usuario es: %s y contrase√±a: %s, recuerde que puede cambiar su clave para mayor comodidad.\n\n" +
            "Atentamente:\n" +
            "Proceso autom√°tico de cambio de contrase√±a",
            usuario.toUpperCase(), claveGenerada
        );
        
        message.setText(cuerpoMensaje);
        
        // Intentar env√≠o con m√∫ltiples configuraciones
        boolean enviado = false;
        
        // 1. Intentar con STARTTLS (puerto 587) - m√°s compatible
        System.out.println("\n1Ô∏è‚É£ Intentando env√≠o con STARTTLS puerto 587...");
        try {
            enviarConSTARTTLS(message);
            System.out.println("‚úÖ CORREO ENVIADO EXITOSAMENTE VIA STARTTLS");
            enviado = true;
        } catch (Exception e) {
            System.err.println("‚ùå STARTTLS fall√≥: " + e.getMessage());
        }
          // 2. Si STARTTLS falla, intentar con SSL (puerto 465)
        if (!enviado) {
            System.out.println("\n2Ô∏è‚É£ Intentando env√≠o con SSL puerto 465...");
            try {
                enviarConSSL(message);
                System.out.println("‚úÖ CORREO ENVIADO EXITOSAMENTE VIA SSL");
                enviado = true;
            } catch (Exception e) {
                System.err.println("‚ùå SSL fall√≥: " + e.getMessage());
            }
        }
          if (!enviado) {
            System.err.println("=== ‚ùå TODOS LOS M√âTODOS DE ENV√çO FALLARON ===");
            mostrarInstruccionesGmail();
            throw new RuntimeException("No se pudo enviar el correo con ninguna configuraci√≥n de Gmail");
        }
    }    /**
     * Env√≠a correo usando STARTTLS (puerto 587) - Configuraci√≥n para Office 365
     * PUERTO 587 CONFIRMADO FUNCIONANDO desde telnet
     * Nueva cuenta: opinto@cpt-soft.com
     */
    private void enviarConSTARTTLS(SimpleMailMessage message) throws Exception {        System.out.println("=== USANDO GMAIL - PUERTO 587 CON STARTTLS ===");
        
        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
        mailSender.setHost("smtp.gmail.com");  // Gmail
        mailSender.setPort(587);  // Puerto STARTTLS CONFIRMADO
        mailSender.setUsername("opinto@cpt-soft.com");
        mailSender.setPassword("@OPINTO22");
        
        Properties props = mailSender.getJavaMailProperties();
        props.put("mail.transport.protocol", "smtp");
        props.put("mail.smtp.auth", "true");
        
        // Configuraci√≥n STARTTLS para Gmail
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.starttls.required", "true");  // Gmail requiere TLS
        
        // Usar TLS 1.2 que es m√°s estable
        props.put("mail.smtp.ssl.protocols", "TLSv1.2");
        
        // Configuraciones SSL para Gmail
        props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        
        // Timeouts est√°ndar
        props.put("mail.smtp.connectiontimeout", "30000");
        props.put("mail.smtp.timeout", "30000");
        props.put("mail.smtp.writetimeout", "30000");
        
        // Debug para diagn√≥stico
        props.put("mail.debug", "true");
        
        System.out.println("Servidor: smtp.gmail.com:587");
        System.out.println("Cuenta: opinto@cpt-soft.com");
        System.out.println("Configuraci√≥n: STARTTLS + TLS 1.2");
        
        mailSender.send(message);
    }    /**
     * Env√≠a correo usando SSL directo (puerto 465) - Configuraci√≥n para Gmail
     * Nueva cuenta Gmail: opinto@cpt-soft.com con SSL
     */
    private void enviarConSSL(SimpleMailMessage message) throws Exception {
        System.out.println("=== USANDO GMAIL - PUERTO 465 CON SSL ===");
        
        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
        mailSender.setHost("smtp.gmail.com");  // Gmail
        mailSender.setPort(465);  // Puerto SSL
        mailSender.setUsername("opinto@cpt-soft.com");
        mailSender.setPassword("@OPINTO22");
        
        Properties props = mailSender.getJavaMailProperties();
        props.put("mail.transport.protocol", "smtp");
        props.put("mail.smtp.auth", "true");
        
        // Configuraci√≥n SSL directa para Gmail
        props.put("mail.smtp.ssl.enable", "true");
        props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        props.put("mail.smtp.ssl.protocols", "TLSv1.2");
        
        // Socket factory para SSL
        props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        props.put("mail.smtp.socketFactory.port", "465");
        props.put("mail.smtp.socketFactory.fallback", "false");
          // Timeouts
        props.put("mail.smtp.connectiontimeout", "60000");
        props.put("mail.smtp.timeout", "60000");
        
        // No usar STARTTLS con SSL directo
        props.put("mail.smtp.starttls.enable", "false");
        
        props.put("mail.debug", "true");
          System.out.println("Cuenta: opinto@cpt-soft.com");
        System.out.println("Configuraci√≥n SSL: smtp.gmail.com:465 con SSL directo");
        mailSender.send(message);
    }
    
    /**
     * Muestra instrucciones para configurar Office 365 correctamente
     */    
    private void mostrarInstruccionesGmail() {        System.err.println("\nüö® DIAGN√ìSTICO: PROBANDO NUEVA CUENTA GMAIL");
        System.err.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        System.err.println("üîÑ CUENTA NUEVA: opinto@cpt-soft.com");
        System.err.println("üè¢ PROVEEDOR: Gmail (smtp.gmail.com)");
        System.err.println("üîê CONTRASE√ëA: @OPINTO22");
        System.err.println("");
        System.err.println("üîë VERIFICACIONES GMAIL:");
        System.err.println("");
        System.err.println("üìß PASO 1: Verificar configuraci√≥n de cuenta");
        System.err.println("‚Ä¢ Cuenta: opinto@cpt-soft.com debe existir en Gmail");
        System.err.println("‚Ä¢ Contrase√±a: @OPINTO22 debe ser correcta");
        System.err.println("‚Ä¢ ¬øEs el dominio personalizado de Gmail?");
        System.err.println("");
        System.err.println("üîí PASO 2: Verificar pol√≠ticas de seguridad Gmail");
        System.err.println("‚Ä¢ Si tiene 2FA: Generar contrase√±a de aplicaci√≥n");
        System.err.println("‚Ä¢ Si NO tiene 2FA: Habilitar 'Aplicaciones menos seguras'");
        System.err.println("‚Ä¢ Verificar que la cuenta no est√© bloqueada");
        System.err.println("");
        System.err.println("üåê PASO 3: Configuraci√≥n de red/firewall");
        System.err.println("‚Ä¢ Puerto 587 (STARTTLS) debe estar abierto");
        System.err.println("‚Ä¢ Puerto 465 (SSL) debe estar abierto");
        System.err.println("‚Ä¢ smtp.gmail.com debe ser accesible");
        System.err.println("");
        System.err.println("üß™ PASO 4: Links importantes:");
        System.err.println("‚Ä¢ 2FA: https://myaccount.google.com/security");
        System.err.println("‚Ä¢ Apps menos seguras: https://myaccount.google.com/lesssecureapps");
        System.err.println("‚Ä¢ Desbloqueo: https://accounts.google.com/DisplayUnlockCaptcha");
    }    /**
     * Prueba la conectividad con Gmail sin enviar correo
     */
    public boolean probarConectividad() {
        System.out.println("=== DIAGN√ìSTICO COMPLETO DE CONECTIVIDAD GMAIL ===");
        System.out.println("CUENTA: opinto@cpt-soft.com");
        System.out.println("SERVIDOR: smtp.gmail.com");
        
        boolean conectividad = false;
          // 1. Intentar con STARTTLS (puerto 587) - m√°s compatible
        System.out.println("\n1Ô∏è‚É£ Probando STARTTLS puerto 587...");
        try {
            if (probarConfiguracionSTARTTLS()) {
                System.out.println("‚úÖ STARTTLS 587 - CONECTIVIDAD OK");
                conectividad = true;
            }
        } catch (Exception e) {
            System.err.println("‚ùå STARTTLS 587 fall√≥: " + e.getMessage());
        }
        
        // 2. Si STARTTLS falla, probar configuraci√≥n SMTP b√°sica (puerto 587 sin TLS)
        if (!conectividad) {
            System.out.println("\n2Ô∏è‚É£ Probando SMTP b√°sico puerto 587 (sin STARTTLS)...");
            try {
                if (probarConfiguracionSMTPBasico()) {
                    System.out.println("‚úÖ SMTP b√°sico 587 - CONECTIVIDAD OK");
                    conectividad = true;
                }
            } catch (Exception e) {
                System.err.println("‚ùå SMTP b√°sico fall√≥: " + e.getMessage());
            }
        }
        
        // 3. Probar SSL como √∫ltima alternativa
        if (!conectividad) {
            System.out.println("\n3Ô∏è‚É£ Probando SSL puerto 465...");
            try {
                if (probarConfiguracionSSL()) {
                    System.out.println("‚úÖ SSL 465 - CONECTIVIDAD OK");
                    conectividad = true;
                }
            } catch (Exception e) {
                System.err.println("‚ùå SSL 465 fall√≥: " + e.getMessage());
            }
        }
        
        if (!conectividad) {
            System.err.println("\n‚ùå NINGUNA CONFIGURACI√ìN FUNCION√ì");
            mostrarInstruccionesGmail();
        } else {
            System.out.println("\n‚úÖ AL MENOS UNA CONFIGURACI√ìN FUNCIONA");        }
        
        return conectividad;
    }    private boolean probarConfiguracionSSL() {
        System.out.println("Probando SSL (smtp.gmail.com:465)...");
        try {
            JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
            mailSender.setHost("smtp.gmail.com");
            mailSender.setPort(465);
            mailSender.setUsername("opinto@cpt-soft.com");
            mailSender.setPassword("@OPINTO22");
            
            Properties props = mailSender.getJavaMailProperties();
            props.put("mail.transport.protocol", "smtp");
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.ssl.enable", "true");
            props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
            props.put("mail.smtp.ssl.protocols", "TLSv1.2");
            props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
            props.put("mail.smtp.socketFactory.port", "465");
            props.put("mail.smtp.socketFactory.fallback", "false");
            props.put("mail.smtp.starttls.enable", "false");
            props.put("mail.smtp.connectiontimeout", "30000");
            props.put("mail.smtp.timeout", "30000");
            
            mailSender.testConnection();
            return true;} catch (Exception e) {
            System.err.println("SSL 465 fall√≥: " + e.getClass().getSimpleName() + " - " + e.getMessage());
            return false;
        }
    }    /**
     * Prueba configuraci√≥n SMTP b√°sica puerto 587 SIN STARTTLS
     * Para Gmail (normalmente no necesario, pero para diagn√≥stico)
     */
    private boolean probarConfiguracionSMTPBasico() {
        System.out.println("Probando SMTP B√ÅSICO (smtp.gmail.com:587) - SIN STARTTLS");
        try {
            JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
            mailSender.setHost("smtp.gmail.com");
            mailSender.setPort(587);
            mailSender.setUsername("opinto@cpt-soft.com");
            mailSender.setPassword("@OPINTO22");
            
            Properties props = mailSender.getJavaMailProperties();
            props.put("mail.transport.protocol", "smtp");
            props.put("mail.smtp.auth", "true");
            
            // CONFIGURACI√ìN SMTP B√ÅSICA - SIN TLS/SSL
            props.put("mail.smtp.starttls.enable", "false");  // NO usar STARTTLS
            props.put("mail.smtp.ssl.enable", "false");       // NO usar SSL
            
            // Timeouts b√°sicos
            props.put("mail.smtp.connectiontimeout", "30000");
            props.put("mail.smtp.timeout", "30000");
            
            System.out.println("Configuraci√≥n: SMTP plano sin encriptaci√≥n (solo para diagn√≥stico)");
            
            mailSender.testConnection();
            return true;
        } catch (Exception e) {
            System.err.println("SMTP b√°sico 587 fall√≥: " + e.getClass().getSimpleName() + " - " + e.getMessage());            if (e.getMessage() != null && e.getMessage().contains("Username and Password not accepted")) {
                System.err.println("‚úÖ CONECTIVIDAD OK: El problema S√ç es de autenticaci√≥n");
                System.err.println("   Gmail acepta conexi√≥n pero rechaza credenciales");
            }
            
            return false;
        }
    }    private boolean probarConfiguracionSTARTTLS() {
        System.out.println("Probando STARTTLS (smtp.gmail.com:587) - GMAIL");
        try {
            JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
            mailSender.setHost("smtp.gmail.com");
            mailSender.setPort(587);  // Puerto STARTTLS est√°ndar
            mailSender.setUsername("opinto@cpt-soft.com");
            mailSender.setPassword("@OPINTO22");
            
            Properties props = mailSender.getJavaMailProperties();
            props.put("mail.transport.protocol", "smtp");
            props.put("mail.smtp.auth", "true");
            
            // Configuraci√≥n STARTTLS para Gmail
            props.put("mail.smtp.starttls.enable", "true");
            props.put("mail.smtp.starttls.required", "true");  // Gmail requiere TLS
            
            // TLS 1.2 para Gmail
            props.put("mail.smtp.ssl.protocols", "TLSv1.2");
            
            // Trust espec√≠fico de Gmail
            props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
            
            // Timeouts est√°ndar
            props.put("mail.smtp.connectiontimeout", "30000");
            props.put("mail.smtp.timeout", "30000");
            
            System.out.println("Configuraci√≥n TLS: TLSv1.2, STARTTLS requerido para Gmail");
            
            mailSender.testConnection();
            return true;
        } catch (Exception e) {
            System.err.println("STARTTLS 587 fall√≥: " + e.getClass().getSimpleName() + " - " + e.getMessage());
            
            // Diagn√≥stico espec√≠fico para TLS
            if (e.getMessage() != null) {
                String mensaje = e.getMessage().toLowerCase();
                if (mensaje.contains("could not convert socket to tls")) {
                    System.err.println("üö® PROBLEMA TLS DETECTADO:");
                    System.err.println("   Gmail rechaza la negociaci√≥n TLS");
                    System.err.println("   Intentando configuraci√≥n a√∫n m√°s b√°sica...");
                } else if (mensaje.contains("username and password not accepted")) {
                    System.err.println("üö® PROBLEMA DE AUTENTICACI√ìN:");
                    System.err.println("   TLS OK, pero credenciales rechazadas");
                }
            }
            
            return false;
        }
    }
    
    /**
     * Prueba credenciales de Gmail personalizadas
     */
    public boolean probarCredencialesPersonalizadas(String email, String password) {
        System.out.println("=== PROBANDO CREDENCIALES PERSONALIZADAS ===");
        System.out.println("Email: " + email);
        System.out.println("Password: " + (password != null ? "***" : "null"));
        
        boolean funciona = false;
        
        // 1. Probar STARTTLS
        System.out.println("\n1Ô∏è‚É£ Probando STARTTLS 587 con credenciales personalizadas...");
        try {
            JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
            mailSender.setHost("smtp.gmail.com");
            mailSender.setPort(587);
            mailSender.setUsername(email);
            mailSender.setPassword(password);
            
            Properties props = mailSender.getJavaMailProperties();
            props.put("mail.transport.protocol", "smtp");
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.enable", "true");
            props.put("mail.smtp.starttls.required", "true");
            props.put("mail.smtp.ssl.protocols", "TLSv1.2 TLSv1.3");
            props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
            props.put("mail.smtp.connectiontimeout", "30000");
            props.put("mail.smtp.timeout", "30000");
            props.put("mail.debug", "true");
            
            mailSender.testConnection();
            System.out.println("‚úÖ STARTTLS 587 funciona con credenciales personalizadas");
            funciona = true;
        } catch (Exception e) {
            System.err.println("‚ùå STARTTLS fall√≥: " + e.getMessage());
        }
        
        // 2. Probar SSL si STARTTLS falla
        if (!funciona) {
            System.out.println("\n2Ô∏è‚É£ Probando SSL 465 con credenciales personalizadas...");
            try {
                JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
                mailSender.setHost("smtp.gmail.com");
                mailSender.setPort(465);
                mailSender.setUsername(email);
                mailSender.setPassword(password);
                
                Properties props = mailSender.getJavaMailProperties();
                props.put("mail.transport.protocol", "smtp");
                props.put("mail.smtp.auth", "true");
                props.put("mail.smtp.ssl.enable", "true");
                props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
                props.put("mail.smtp.ssl.protocols", "TLSv1.2 TLSv1.3");
                props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
                props.put("mail.smtp.socketFactory.port", "465");
                props.put("mail.smtp.starttls.enable", "false");
                props.put("mail.smtp.connectiontimeout", "30000");
                props.put("mail.smtp.timeout", "30000");
                props.put("mail.debug", "true");
                
                mailSender.testConnection();
                System.out.println("‚úÖ SSL 465 funciona con credenciales personalizadas");
                funciona = true;
            } catch (Exception e) {
                System.err.println("‚ùå SSL fall√≥: " + e.getMessage());
            }
        }
        
        if (!funciona) {
            System.err.println("\n‚ùå CREDENCIALES PERSONALIZADAS NO FUNCIONAN");
            System.err.println("Verifica:");
            System.err.println("‚Ä¢ Email correcto: " + email);
            System.err.println("‚Ä¢ Contrase√±a correcta o contrase√±a de aplicaci√≥n");
            System.err.println("‚Ä¢ Configuraci√≥n de seguridad de Gmail");
        }
        
        return funciona;
    }
}
